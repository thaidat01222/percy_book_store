"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _analyticsNext = require("@atlaskit/analytics-next");

var _components = _interopRequireDefault(require("@atlaskit/theme/components"));

var _styles = require("./styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var analyticsParams = {
  componentName: 'textField',
  packageName: "@atlaskit/textfield",
  packageVersion: "5.0.1"
};
var TextfieldWithMode = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var input = (0, _react.useRef)(null);
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,
      _props$isCompact = props.isCompact,
      isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      _props$isRequired = props.isRequired,
      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
      _props$isReadOnly = props.isReadOnly,
      isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
      _props$isMonospaced = props.isMonospaced,
      isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,
      width = props.width,
      mode = props.mode,
      elemAfterInput = props.elemAfterInput,
      elemBeforeInput = props.elemBeforeInput,
      testId = props.testId,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onMouseDown = props.onMouseDown,
      className = props.className,
      otherProps = (0, _objectWithoutProperties2.default)(props, ["appearance", "isCompact", "isDisabled", "isInvalid", "isRequired", "isReadOnly", "isMonospaced", "width", "mode", "elemAfterInput", "elemBeforeInput", "testId", "onFocus", "onBlur", "onMouseDown", "className"]);
  var handleOnFocus = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: 'focused'
  }, analyticsParams));
  var handleOnBlur = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: 'blurred'
  }, analyticsParams));
  var handleOnMouseDown = (0, _react.useCallback)(function (event) {
    /** Running e.preventDefault() on the INPUT prevents double click behaviour */
    // Sadly we needed this cast as the target type is being correctly set
    var target = event.target;

    if (target.tagName !== 'INPUT') {
      event.preventDefault();
    }

    if (input && input.current && !isDisabled && document.activeElement !== input.current) {
      input.current.focus();
    }

    onMouseDown && onMouseDown(event);
  }, [onMouseDown, input, isDisabled]); // we want to keep a copy of the ref as well as pass it along

  var setInputRef = (0, _react.useCallback)(function (inputElement) {
    input.current = inputElement;
    var forwardedRef = ref;

    if (!forwardedRef) {
      return;
    }

    if ((0, _typeof2.default)(forwardedRef) === 'object') {
      // This is a blunder on the part of @types/react
      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065
      // .current should be assignable
      // @ts-ignore
      forwardedRef.current = inputElement;
    }

    if (typeof forwardedRef === 'function') {
      forwardedRef(inputElement);
    }
  }, [ref]);
  var inputControlProps = {
    'data-compact': isCompact ? isCompact : undefined,
    'data-monospaced': isMonospaced ? isMonospaced : undefined,
    'aria-invalid': isInvalid ? isInvalid : undefined
  };
  var containerControlProps = {
    'data-disabled': isDisabled ? isDisabled : undefined,
    'data-invalid': isInvalid ? isInvalid : undefined
  };
  var containerStyles = (0, _react.useMemo)(function () {
    return (0, _styles.containerStyles)(appearance, mode, width);
  }, [appearance, mode, width]);
  var inputStyle = (0, _react.useMemo)(function () {
    return (0, _styles.inputStyles)(mode);
  }, [mode]);
  return (// https://product-fabric.atlassian.net/browse/DST-1970
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _core.jsx)("div", (0, _extends2.default)({}, containerControlProps, {
      onMouseDown: handleOnMouseDown,
      "data-ds--text-field--container": true,
      "data-testid": testId && "".concat(testId, "-container"),
      css: containerStyles,
      className: className
    }), elemBeforeInput, (0, _core.jsx)("input", (0, _extends2.default)({}, otherProps, inputControlProps, {
      disabled: isDisabled,
      readOnly: isReadOnly,
      required: isRequired,
      onBlur: handleOnBlur,
      onFocus: handleOnFocus,
      ref: setInputRef,
      "data-ds--text-field--input": true,
      "data-testid": testId,
      css: inputStyle
    })), elemAfterInput)
  );
});
var Textfield = /*#__PURE__*/(0, _react.forwardRef)(function Textfield(props, ref) {
  return (0, _core.jsx)(_components.default.Consumer, null, function (_ref) {
    var mode = _ref.mode;
    return (0, _core.jsx)(TextfieldWithMode, (0, _extends2.default)({}, props, {
      mode: mode,
      ref: ref
    }));
  });
});
Textfield.displayName = 'Textfield';

var _default = /*#__PURE__*/(0, _react.memo)(Textfield);

exports.default = _default;