import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from 'react';
import { fireEvent } from '@testing-library/dom';
import Texfield from '../../src';
export default {
  title: 'Examples'
};
var testId = 'text-field-test-id';

var getLastTexfield = function getLastTexfield(container) {
  var textField = container.querySelectorAll("[data-testId=\"".concat(testId, "\"]"));
  return textField[textField.length - 1];
};

export var textField = function textField() {
  return /*#__PURE__*/React.createElement(Texfield, {
    placeholder: "new texfield",
    testId: testId,
    width: "large"
  });
};
var interactionTasks = [{
  name: 'Focus',
  description: 'Render texfield and make input focus',
  run: function () {
    var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
      var container, texfield;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              container = _ref.container;
              texfield = getLastTexfield(container);
              fireEvent.focus(texfield);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}, {
  name: 'Blur',
  description: 'Render texfield and make input blur',
  run: function () {
    var _run2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {
      var container, texfield;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              container = _ref2.container;
              texfield = getLastTexfield(container);
              fireEvent.blur(texfield);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function run(_x2) {
      return _run2.apply(this, arguments);
    }

    return run;
  }()
}, {
  name: 'OnChange',
  description: 'Render texfield and make input change',
  run: function () {
    var _run3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3) {
      var container, texfield;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              container = _ref3.container;
              texfield = getLastTexfield(container);
              fireEvent.change(texfield, {
                target: {
                  value: 'foo'
                }
              });

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function run(_x3) {
      return _run3.apply(this, arguments);
    }

    return run;
  }()
}];
textField.story = {
  name: 'texfield',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};