import { CSSObject } from '@emotion/core';
import { ThemeModes } from '@atlaskit/theme/types';
import { Appearance } from './types';
export declare const containerStyles: (appearance: Appearance, mode: ThemeModes, width?: string | number | undefined) => CSSObject;
export declare const inputStyles: (mode: ThemeModes) => CSSObject;
export declare const TextFieldColors: {
    backgroundColor: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorFocus: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorHover: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColor: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColorFocus: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    placeholderTextColor: {
        light: string;
        dark: string;
    };
    textColor: {
        light: string;
        dark: string;
    };
    invalidRules: {
        light: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
        };
        dark: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
        };
    };
    disabledRules: {
        light: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
            textColor: string;
        };
        dark: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
            textColor: string;
        };
    };
};
