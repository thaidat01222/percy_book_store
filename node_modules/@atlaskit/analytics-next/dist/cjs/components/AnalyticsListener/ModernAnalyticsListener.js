"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNextStableReactContext = _interopRequireDefault(require("@atlaskit/analytics-next-stable-react-context"));

var _useAnalyticsContext = require("../../hooks/useAnalyticsContext");

var _useTrackedRef = require("../../hooks/useTrackedRef");

var AnalyticsListener = function AnalyticsListener(_ref) {
  var children = _ref.children,
      channel = _ref.channel,
      onEvent = _ref.onEvent;
  var analyticsContext = (0, _useAnalyticsContext.useAnalyticsContext)();
  var onEventRef = (0, _useTrackedRef.useTrackedRef)(onEvent);
  var channelRef = (0, _useTrackedRef.useTrackedRef)(channel);
  var getAtlaskitAnalyticsEventHandlers = (0, _react.useCallback)(function () {
    var thisHandler = function thisHandler(event, eventChannel) {
      if (channelRef.current === '*' || channelRef.current === eventChannel) {
        onEventRef.current(event, eventChannel);
      }
    };

    return [].concat((0, _toConsumableArray2.default)(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);
  }, [analyticsContext, channelRef, onEventRef]);
  var value = (0, _react.useMemo)(function () {
    return {
      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,
      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext
    };
  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);
  return /*#__PURE__*/_react.default.createElement(_analyticsNextStableReactContext.default.Provider, {
    value: value
  }, children);
};

var _default = AnalyticsListener;
exports.default = _default;