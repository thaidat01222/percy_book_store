import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import withAnalyticsEvents from '../hocs/withAnalyticsEvents';
import AnalyticsContext from './AnalyticsContext/LegacyAnalyticsContext';
// eslint-disable-next-line @repo/internal/react/no-class-components
export var BaseAnalyticsErrorBoundary = /*#__PURE__*/function (_Component) {
  _inherits(BaseAnalyticsErrorBoundary, _Component);

  var _super = _createSuper(BaseAnalyticsErrorBoundary);

  function BaseAnalyticsErrorBoundary() {
    var _this;

    _classCallCheck(this, BaseAnalyticsErrorBoundary);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "fireAnalytics", function (analyticsErrorPayload) {
      var _this$props = _this.props,
          createAnalyticsEvent = _this$props.createAnalyticsEvent,
          channel = _this$props.channel,
          data = _this$props.data;
      createAnalyticsEvent({
        action: 'UnhandledError',
        eventType: 'ui',
        attributes: _objectSpread(_objectSpread({
          browserInfo: window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : 'unknown'
        }, data), analyticsErrorPayload)
      }).fire(channel);
    });

    return _this;
  }

  _createClass(BaseAnalyticsErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var payload = {
        error: error,
        info: info
      };
      this.fireAnalytics(payload);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          data = _this$props2.data,
          children = _this$props2.children;
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: data
      }, children);
    }
  }]);

  return BaseAnalyticsErrorBoundary;
}(Component);
var AnalyticsErrorBoundary = withAnalyticsEvents()(BaseAnalyticsErrorBoundary);
export default AnalyticsErrorBoundary;