import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _typeof from "@babel/runtime/helpers/typeof";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useMemo } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
export function usePatchedProps() {
  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var wrappedComponentProps = arguments.length > 1 ? arguments[1] : undefined;

  var _useAnalyticsEvents = useAnalyticsEvents(),
      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  var patchedProps = useMemo(function () {
    return Object.keys(createEventMap).reduce(function (p, k) {
      var eventCreator = createEventMap[k];

      if (!['object', 'function'].includes(_typeof(eventCreator))) {
        return p;
      }

      var propValue = wrappedComponentProps[k];

      var wrappedCallback = function wrappedCallback() {
        var analyticsEvent = typeof eventCreator === 'function' ? eventCreator(createAnalyticsEvent, wrappedComponentProps) : createAnalyticsEvent(eventCreator);

        if (propValue && typeof propValue === 'function') {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          propValue.apply(void 0, args.concat([analyticsEvent]));
        }
      };

      return wrappedCallback ? _objectSpread(_objectSpread({}, p), {}, _defineProperty({}, k, wrappedCallback)) : p;
    }, {});
  }, [createEventMap, wrappedComponentProps, createAnalyticsEvent]);
  return {
    patchedEventProps: patchedProps
  };
}