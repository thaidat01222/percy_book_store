import _extends from "@babel/runtime/helpers/extends";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n            display: inline-block;\n            ", "\n            flex-shrink: 0;\n            line-height: 1;\n\n            > svg {\n              ", "\n              max-height: 100%;\n              max-width: 100%;\n              vertical-align: bottom;\n              ", "\n            }\n          "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

/** @jsx jsx */
import { memo } from 'react';
import { css, jsx } from '@emotion/core';
import GlobalTheme from '@atlaskit/theme/components';
import { getBackground } from './utils';
import { getSVGStyles, getSizeStyles } from './styles';
/**
 * We are hiding these props from consumers because they don't act as one would expect.
 */

var Icon = /*#__PURE__*/memo(function Icon(props) {
  var _ref = props,
      Glyph = _ref.glyph,
      dangerouslySetGlyph = _ref.dangerouslySetGlyph,
      primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor,
      size = _ref.size,
      testId = _ref.testId,
      label = _ref.label,
      width = _ref.width,
      height = _ref.height;
  var glyphProps = dangerouslySetGlyph ? {
    dangerouslySetInnerHTML: {
      __html: dangerouslySetGlyph
    }
  } : {
    children: Glyph ? jsx(Glyph, {
      role: "presentation"
    }) : null
  };
  var dimensions = getSizeStyles({
    width: width,
    height: height,
    size: size
  });
  return jsx(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return jsx("span", _extends({
      "data-testid": testId,
      role: label ? 'img' : 'presentation',
      "aria-label": label ? label : undefined
    }, glyphProps, {
      /**
       * The size dimensions on the span element have dubious value and can be removed
       * when/if icon is overhauled futher. Lite Mode didn't have the capacity to deal
       * with fully investigating the impact of this change,
       * but in _most_ cases they are not required.
       *
       * @see getSizeStyles for more info
       */
      css: css(_templateObject(), dimensions, dimensions, getSVGStyles({
        primaryColor: primaryColor,
        secondaryColor: secondaryColor || getBackground(mode)
      }))
    }));
  });
});
export default Icon;