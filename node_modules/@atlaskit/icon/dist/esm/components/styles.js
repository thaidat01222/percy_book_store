import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  overflow: hidden;\n  pointer-events: none;\n  color: ", ";\n  fill: ", ";\n\n  /**\n  * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n  * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n  * rule) and then override it with currentColor for the color changes to be picked up.\n  */\n  stop {\n    stop-color: currentColor;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import { css } from '@emotion/core';
import { sizes } from '../constants';
export var getSVGStyles = function getSVGStyles(_ref) {
  var primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor;
  return css(_templateObject(), primaryColor || 'currentColor', secondaryColor);
};
/**
 * Returns the width of the icon's parent span. This function has
 * special behaviour to deal with icon-file-type specifically.
 *
 * The reality is the SVG still has its own dimensions, so this is
 * a secondary fallback which in 95% of cases is not required.
 * It's only really being kept to maintain backward compatability.
 */

export var getSizeStyles = function getSizeStyles(_ref2) {
  var width = _ref2.width,
      height = _ref2.height,
      size = _ref2.size;

  if (width && height) {
    return "height: ".concat(height, "px; width: ").concat(width, "px;");
  }

  if (size) {
    return "height: ".concat(sizes[size], "; width: ").concat(sizes[size], ";");
  }

  return '';
};