"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _analyticsNext = require("@atlaskit/analytics-next");

var _useAutoFocus = _interopRequireDefault(require("@atlaskit/ds-lib/use-auto-focus"));

var _blockEvents = _interopRequireDefault(require("./block-events"));

var _css = require("./css");

/** @jsx jsx */
function noop() {} // Disabled buttons will still publish events for nested elements in webkit.
// We are disabling pointer events on child elements so that
// the button will always be the target of events
// Note: firefox does not have this behaviour for child elements


var noPointerEventsOnChildrenCss = {
  '> *': {
    pointerEvents: 'none'
  }
};

var _default = /*#__PURE__*/_react.default.forwardRef(function ButtonBase(props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      buttonCss = props.buttonCss,
      _props$spacing = props.spacing,
      spacing = _props$spacing === void 0 ? 'default' : _props$spacing,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$shouldFitConta = props.shouldFitContainer,
      shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,
      _props$isSelected = props.isSelected,
      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
      iconBefore = props.iconBefore,
      iconAfter = props.iconAfter,
      children = props.children,
      className = props.className,
      href = props.href,
      overlay = props.overlay,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
      _props$type = props.type,
      type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,
      _props$onMouseDown = props.onMouseDown,
      providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,
      _props$onClick = props.onClick,
      providedOnClick = _props$onClick === void 0 ? noop : _props$onClick,
      _props$component = props.component,
      Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,
      testId = props.testId,
      analyticsContext = props.analyticsContext,
      rest = (0, _objectWithoutProperties2.default)(props, ["appearance", "buttonCss", "spacing", "autoFocus", "isDisabled", "shouldFitContainer", "isSelected", "iconBefore", "iconAfter", "children", "className", "href", "overlay", "tabIndex", "type", "onMouseDown", "onClick", "component", "testId", "analyticsContext"]);
  var ourRef = (0, _react.useRef)();
  var setRef = (0, _react.useCallback)(function (node) {
    ourRef.current = node;

    if (ref == null) {
      return;
    }

    if (typeof ref === 'function') {
      ref(node);
      return;
    } // @ts-ignore


    ref.current = node;
  }, [ourRef, ref]); // Cross browser auto focusing is pretty broken, so we are doing it ourselves

  (0, _useAutoFocus.default)(ourRef, autoFocus);
  var onClick = (0, _analyticsNext.usePlatformLeafEventHandler)({
    fn: providedOnClick,
    action: 'clicked',
    componentName: 'button',
    packageName: "@atlaskit/button",
    packageVersion: "15.1.6",
    analyticsData: analyticsContext
  }); // Button currently calls preventDefault, which is not standard button behaviour

  var onMouseDown = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    providedOnMouseDown(event);
  }, [providedOnMouseDown]); // Lose focus when becoming disabled (standard button behaviour)

  (0, _react.useEffect)(function () {
    var el = ourRef.current;

    if (isDisabled && el && el === document.activeElement) {
      el.blur();
    }
  }, [isDisabled]); // we are 'disabling' input with a button when there is an overlay

  var hasOverlay = Boolean(overlay);
  var fadeCss = (0, _css.getFadingCss)({
    hasOverlay: hasOverlay
  });
  var isInteractive = !isDisabled && !hasOverlay;
  return (0, _core.jsx)(Component, (0, _extends2.default)({}, rest, {
    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],
    className: className,
    ref: setRef,
    onClick: onClick,
    onMouseDown: onMouseDown,
    disabled: isDisabled,
    href: isInteractive ? href : undefined // using undefined so that the property doesn't exist when false
    ,
    "data-has-overlay": hasOverlay ? true : undefined,
    "data-testid": testId,
    type: type // Adding a tab index so element is always focusable, even when not a <button> or <a>
    // Disabling focus via keyboard navigation when disabled
    // as this is standard button behaviour
    ,
    tabIndex: isDisabled ? -1 : tabIndex
  }, (0, _blockEvents.default)({
    isInteractive: isInteractive
  })), iconBefore ? (0, _core.jsx)("span", {
    css: [fadeCss, (0, _css.getIconStyle)({
      spacing: spacing
    })]
  }, iconBefore) : null, children ? (0, _core.jsx)("span", {
    css: [fadeCss, (0, _css.getContentStyle)({
      spacing: spacing
    })]
  }, children) : null, iconAfter ? (0, _core.jsx)("span", {
    css: [fadeCss, (0, _css.getIconStyle)({
      spacing: spacing
    })]
  }, iconAfter) : null, overlay ? (0, _core.jsx)("span", {
    css: _css.overlayCss
  }, overlay) : null);
});

exports.default = _default;